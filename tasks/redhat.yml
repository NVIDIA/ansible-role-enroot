---
- name: install epel repository
  package:
    name: "{{ epel_package }}"
    state: present

- name: install enroot dependency packages
  yum:
    name: "{{ item }}"
  with_items:
  - "bash-completion"
  - "jq"
  - "parallel"
  - "pigz"
  - "zstd"

- name: set up yum repository (if defined)
  yum_repository:
    name: enroot
    description: enroot
    baseurl: "{{ enroot_rhel_repo }}"
    gpgkey: "{{ enroot_rhel_repo_gpgkey }}"
  when: enroot_rhel_repo is defined

- name: install packages from repo (if defined)
  yum:
    name: "{{ item }}"
    state: "{{ enroot_package_state }}"
  with_items: "{{ enroot_packages }}"
  when: enroot_rhel_repo is defined

- name: Correctly install and/or upgrade Enroot packages from rpm
  when: enroot_rhel_repo is not defined
  block:
  - name: gather package facts for comparison
    package_facts:
      manager: rpm
  - name: remove existing enroot package if we are changing version
    yum:
      name: "{{ enroot_packages }}"
      state: "absent"
    when:
    - "'enroot' in ansible_facts.packages"
    - "ansible_facts.packages['enroot'][0]['version'] != enroot_version_string"
  - name: enroot rpm packages
    yum:
      name: "{{ item }}"
      state: "{{ enroot_package_state }}"
    with_items: "{{ enroot_rpm_packages }}"
    environment: "{{proxy_env if proxy_env is defined else {}}}"

- name: check if kernel unpriv enabled
  shell: "cat /proc/cmdline | grep 'namespace.unpriv_enable=1'"
  register: kernel_unpriv_enable
  failed_when: kernel_unpriv_enable.rc == 127

- name: check if user namespaces enabled
  shell: "cat /proc/cmdline | grep 'user_namespace.enable=1'"
  register: kernel_user_namespace
  failed_when: kernel_user_namespace.rc == 127

- name: install grubby if needed
  yum:
    name: "grubby"
    state: "present"
  when: ((kernel_unpriv_enable.rc == 1) or (kernel_user_namespace.rc == 1)) and enroot_configure_kernel_options

- name: add kernel options to use enroot
  command: "grubby --update-kernel={{ enroot_configure_kernel_options_versions }} --args={{ item }}"
  when: ((kernel_unpriv_enable.rc == 1) or (kernel_user_namespace.rc == 1)) and enroot_configure_kernel_options
  with_items:
    - "namespace.unpriv_enable=1"
    - "user_namespace.enable=1"
  notify:
  - reboot node

- name: set max_user_namespaces 
  sysctl:
    name: user.max_user_namespaces
    value: "{{ enroot_max_user_namespaces }}"
    state: present

- name: set max_mnt_namespaces
  sysctl:
    name: user.max_mnt_namespaces
    value: "{{ enroot_max_mnt_namespaces }}"
    state: present
